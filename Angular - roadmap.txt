Roadmap:-
---------

🚀 Phase 1: Foundations (Beginner)

1️⃣ Introduction to Angular 19 – What it is, why it's popular, and key features
2️⃣ Setting Up the Environment – Installing Node.js, Angular CLI, and creating a project
3️⃣ Understanding Standalone Components – No more NgModule!
4️⃣ Data Binding & Events – One-way, two-way binding, event handling
5️⃣ Directives & Pipes – *ngIf, *ngFor, custom pipes
6️⃣ Forms in Angular 19 – Template-driven vs Reactive forms
7️⃣ Routing & Navigation – Standalone routing, Lazy Loading

⚡ Phase 2: Intermediate Level

8️⃣ State Management – Signals, RxJS, BehaviorSubject
9️⃣ Services & Dependency Injection – Sharing logic across components
🔟 HTTP Client & API Integration – Fetching data, handling errors
1️⃣1️⃣ Angular Lifecycle Hooks – onInit(), onDestroy(), etc.
1️⃣2️⃣ Component Communication – @Input, @Output, ViewChild

🔥 Phase 3: Advanced Topics

1️⃣3️⃣ Performance Optimization – Change Detection, Lazy Loading
1️⃣4️⃣ Security Best Practices – XSS, CSRF, JWT Authentication
1️⃣5️⃣ Unit Testing & Debugging – Writing tests with Jest, Jasmine
1️⃣6️⃣ Server-Side Rendering (SSR) – Making Angular apps faster
1️⃣7️⃣ Monorepo with NX – Structuring large Angular projects

-----------------------------------------------------------------------------------------------------------------------

📌 Angular Core Concepts
Angular is built on 6 main pillars:

1️⃣ Modules (@NgModule) → Organizes the app into functional blocks
2️⃣ Components (@Component) → UI elements of the app
3️⃣ Templates & Data Binding → How HTML and TypeScript interact
4️⃣ Directives & Pipes → Modifying the DOM dynamically
5️⃣ Services & Dependency Injection → Sharing logic across components
6️⃣ Routing → Navigating between pages

-----------

🔍 Key Changes in Angular 19
✅ Fully Standalone Components (No NgModule required)
✅ Faster Hydration & Server-Side Rendering (SSR) Improvements
✅ Improved Reactivity with Signals
✅ Built-in Control Flow (@if, @for, @switch)
✅ Better Performance & Optimizations

-----------
📍Understanding Angular Structure
Open the task-manager project in VS Code and explore the src/app/ folder.

🔹 app.module.ts (Main module of the app)
🔹 app.component.ts (Root component, contains business logic)
🔹 app.component.html (Template file, contains UI)
🔹 app.component.css (Styling file)
🔹 app.component.spec.ts (For testing)

----------
📍 Step 2: Understanding Standalone Components
Unlike older Angular versions, Angular 19 doesn’t require NgModule. Your project structure should look like this:

src/
 ├── app/
 │   ├── app.config.ts
 │   ├── app.component.ts
 │   ├── app.component.html
 │   ├── app.component.css
 │   ├── app.component.spec.ts
 │   ├── app.routes.ts
 ├── index.html
 ├── main.ts
 ├── styles.css
🟢 No app.module.ts! Instead, everything is registered in main.ts.

----------
📍 Step 3: Create Your First Component
Now, let's create a Task List Component inside src/app/.

Run:
    ng g component task-list --standalone
        or
    ng generate component task-list --standalone

This will create:
    task-list.component.ts (Logic)
    task-list.component.html (Template)
    task-list.component.css (Styles)
    task-list.component.spec.ts (Testing)

src/
 ├── app/
 │   ├── task-list/
 │   │   ├── task-list.component.css (Styles)
 │   │   ├── task-list.component.html (Template)
 │   │   ├── task-list.component.spec.ts (Testing)
 │   │   ├── task-list.component.ts (Logic)
 │   ├── app.config.ts
 │   ├── app.component.ts
 │   ├── app.component.html
 │   ├── app.component.css
 │   ├── app.component.spec.ts
 │   ├── app.routes.ts
 ├── index.html
 ├── main.ts
 ├── styles.css

------------
📍 Step 4: Add the Component to Your App
Open app.component.html and replace the content with:

html:
    <h1>My Angular 19 App</h1>
    <app-task-list></app-task-list>

Then, open app.component.ts and import the new component:

typescript:
    import { Component } from '@angular/core';
    import { TaskListComponent } from './task-list/task-list.component';

    @Component({
      selector: 'app-root',
      standalone: true,
      templateUrl: './app.component.html',
      styleUrl: './app.component.css',
      imports: [TaskListComponent]
    })
    export class AppComponent {}

Run: 
    ng serve
🔹 You should see your TaskListComponent working inside your main app!

--------------
Now let's dive into Data Binding—the backbone of dynamic Angular applications.
--------------

📌 Step 5: Understanding Data Binding in Angular 19
Angular provides four types of data binding to connect your UI and logic:

1️⃣ Interpolation ({{ }}) → Displaying Data
This is used to bind data from TypeScript to HTML.

🔹 Example (Modify task-list.component.ts):

typescript:
    import { Component } from '@angular/core';

    @Component({
      selector: 'app-task-list',
      standalone: true, (By default true in case you don't mention)
      templateUrl: './task-list.component.html',
      styleUrl: './task-list.component.css'
    })
    export class TaskListComponent {
      task = 'Learn Angular 19'; // Dynamic data
    }

🔹 Modify task-list.component.html:

html:
    <h2>Task List</h2>
    <p>Current Task: {{ task }}</p>

✅ Run ng serve → You should see "Current Task: Learn Angular 19" displayed on the page.

---------
2️⃣ Property Binding ([property]="value") → Binding to HTML Attributes
This is used when you need to dynamically update properties like disabled, src, value, etc.

🔹 Modify task-list.component.ts:

typescript:
    taskInputPlaceholder = "Enter a new task...";
    isDisabled = true;

🔹 Modify task-list.component.html:

html:
    <input type="text" [placeholder]="taskInputPlaceholder" [disabled]="isDisabled">

✅ The input box should be disabled, and the placeholder should be dynamically set.

---------
3️⃣ Event Binding ((event)="function()") → Handling User Events
Used to handle clicks, key presses, form submissions, etc.

🔹 Modify task-list.component.ts:

typescript:
    toggleInput() {
        this.isDisabled = !this.isDisabled;
    }

🔹 Modify task-list.component.html:

html:
    <button (click)="toggleInput()">Toggle Input</button>

✅ Clicking the button should enable/disable the input field dynamically.

-----------
4️⃣ Two-Way Binding ([(ngModel)]="value") → Sync Data Between UI & Component
To enable two-way binding, import FormsModule inside task-list.component.ts.

🔹 Modify task-list.component.ts:

typescript:
    import { Component } from '@angular/core';
    import { FormsModule } from '@angular/forms';

    @Component({    
        selector: 'app-task-list',
        standalone: true,
        templateUrl: './task-list.component.html',
        styleUrl: './task-list.component.css',
        imports: [FormsModule] // Import FormsModule for ngModel
    })
    export class TaskListComponent {
      newTask = "";
    }

🔹 Modify task-list.component.html:

html:
    <input type="text" [(ngModel)]="newTask" placeholder="Enter task">
    <p>You typed: {{ newTask }}</p>

✅ Now, as you type in the input box, the text will dynamically update below it!

----------
Great job! 🎉 Now let’s build a simple Task List app where you can:
✅ Add new tasks
✅ Delete tasks
✅ Mark tasks as completed
----------

📌 Step 6: Build a Task List App

🔹 Step 1: Update task-list.component.ts
Modify your component to manage an array of tasks:

typescript:
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common'
import { FormsModule } from '@angular/forms'

@Component({
  selector: 'app-task-list',
  templateUrl: './task-list.component.html',
  styleUrl: './task-list.component.css',
  imports: [CommonModule, FormsModule] // Import FormsModule for ngModel
})
export class TaskListComponent {
  newTask: string = "";
  tasks: { text: string; completed: boolean }[] = [];

  // Add task
  addTask() {
    if (this.newTask.trim() !== "") {
      this.tasks.push({ text: this.newTask, completed: false });
      this.newTask = ""; // Clear input after adding
    }
  }

  // Remove task
  removeTask(index: number) {
    this.tasks.splice(index, 1);
  }

  // Toggle task completion
  toggleTask(index: number) {
    this.tasks[index].completed = !this.tasks[index].completed;
  }
}
------------
🔹 Step 2: Update task-list.component.html
Now, let's create the UI:

html:
<h2>Task List</h2>

<!-- Input and Add Button -->
<input type="text" [(ngModel)]="newTask" placeholder="Enter a task">
<button (click)="addTask()">Add Task</button>

<!-- Display Tasks -->
<ul>
  <li *ngFor="let task of tasks; let i = index">
    <span [style.textDecoration]="task.completed ? 'line-through' : 'none'">
      {{ task.text }}
    </span>
    <button (click)="toggleTask(i)">✔</button>
    <button (click)="removeTask(i)">❌</button>
  </li>
</ul>

-----------
📌 Step 7: Save Tasks Using Local Storage
Right now, when you refresh, all tasks disappear. We’ll fix that by:
✅ Saving tasks to Local Storage when adding/removing
✅ Loading tasks from Local Storage when the app starts
-----------
🔹 Step 1: Update task-list.component.ts
Modify your component to save/load tasks from Local Storage:

typescript:
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-task-list',
  standalone: true,
  templateUrl: './task-list.component.html',
  styleUrl: './task-list.component.css',
  imports: [FormsModule]
})
export class TaskListComponent {
  newTask: string = "";
  tasks: { text: string; completed: boolean }[] = [];

  constructor() {
    this.loadTasks(); // Load tasks when the component initializes
  }

  // Save tasks to Local Storage
  saveTasks() {
    localStorage.setItem('tasks', JSON.stringify(this.tasks));
  }

  // Load tasks from Local Storage
  loadTasks() {
    const savedTasks = localStorage.getItem('tasks');
    if (savedTasks) {
      this.tasks = JSON.parse(savedTasks);
    }
  }

  // Add task
  addTask() {
    if (this.newTask.trim() !== "") {
      this.tasks.push({ text: this.newTask, completed: false });
      this.newTask = ""; 
      this.saveTasks(); // Save after adding
    }
  }

  // Remove task
  removeTask(index: number) {
    this.tasks.splice(index, 1);
    this.saveTasks(); // Save after removing
  }

  // Toggle task completion
  toggleTask(index: number) {
    this.tasks[index].completed = !this.tasks[index].completed;
    this.saveTasks(); // Save after toggling
  }
}

-----------
🔥 Now let’s add a Task Filter so users can:
✅ Show All Tasks
✅ Show Only Completed Tasks
✅ Show Only Pending Tasks
-----------
📌 Step 8: Add a Task Filter
-----------
🔹 Step 1: Update task-list.component.ts
Modify your component to track the selected filter and filter tasks accordingly:

typescript:
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-task-list',
  standalone: true,
  templateUrl: './task-list.component.html',
  styleUrl: './task-list.component.css',
  imports: [FormsModule]
})
export class TaskListComponent {
  newTask: string = "";
  tasks: { text: string; completed: boolean }[] = [];
  filter: string = 'all'; // Can be 'all', 'completed', or 'pending'

  constructor() {
    this.loadTasks();
  }

  saveTasks() {
    localStorage.setItem('tasks', JSON.stringify(this.tasks));
  }

  loadTasks() {
    const savedTasks = localStorage.getItem('tasks');
    if (savedTasks) {
      this.tasks = JSON.parse(savedTasks);
    }
  }

  addTask() {
    if (this.newTask.trim() !== "") {
      this.tasks.push({ text: this.newTask, completed: false });
      this.newTask = ""; 
      this.saveTasks();
    }
  }

  removeTask(index: number) {
    this.tasks.splice(index, 1);
    this.saveTasks();
  }

  toggleTask(index: number) {
    this.tasks[index].completed = !this.tasks[index].completed;
    this.saveTasks();
  }

  // Filtered task list based on selected filter
  getFilteredTasks() {
    if (this.filter === 'completed') {
      return this.tasks.filter(task => task.completed);
    } else if (this.filter === 'pending') {
      return this.tasks.filter(task => !task.completed);
    }
    return this.tasks;
  }

  // Set filter
  setFilter(type: string) {
    this.filter = type;
  }
}

------------
🔹 Step 2: Update task-list.component.html
Add filter buttons and update the task list to use getFilteredTasks():

html:
<h2>Task List</h2>

<!-- Input and Add Button -->
<input type="text" [(ngModel)]="newTask" placeholder="Enter a task">
<button (click)="addTask()">Add Task</button>

<!-- Filter Buttons -->
<div>
  <button (click)="setFilter('all')">Show All</button>
  <button (click)="setFilter('completed')">Show Completed</button>
  <button (click)="setFilter('pending')">Show Pending</button>
</div>

<!-- Display Filtered Tasks -->
<ul>
  <li *ngFor="let task of getFilteredTasks(); let i = index">
    <span [style.textDecoration]="task.completed ? 'line-through' : 'none'">
      {{ task.text }}
    </span>
    <button (click)="toggleTask(i)">✔</button>
    <button (click)="removeTask(i)">❌</button>
  </li>
</ul>

-----------------------------------------

🔥 Let's break it down into three phases so we can systematically level up your app.

📌 PHASE 1: UI Enhancements (Smooth Animations & Styling)
✅ Add animations for task entry and deletion.
✅ Use colors/icons for completed, pending, and priority tasks.
✅ Progress bar to show task completion percentage.

📌 PHASE 2: Feature Expansion (Deadlines, Priorities, Categories)
✅ Add due dates for each task.
✅ Set priority levels (High, Medium, Low).
✅ Categorize tasks (Work, Personal, Study).
✅ Filter by category & priority.

📌 PHASE 3: Backend Integration (Firebase/API)
✅ Move from LocalStorage to Firebase for real-time sync.
✅ Allow tasks to persist across devices.
✅ Implement authentication (optional) for personalized lists.
-----------------------------------------
 Let's add smooth animations and styling to make your task list feel modern and interactive.

🔥 What We’ll Improve
✅ Fade-in animations for new tasks.
✅ Slide-out effect when deleting tasks.
✅ Progress bar to track completed tasks.
✅ Better colors/icons for priorities & completion.

✅ Step 1: Install Animations
Angular provides a built-in animation module. Run this command in your terminal:

bash:
  ng add @angular/animations
This will set up Angular’s animation library.

✅ Step 2: Update task-list.component.ts
Modify the component to include animations and a progress bar calculation.

TypeScript:
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-task-list',
  standalone: true,
  templateUrl: './task-list.component.html',
  styleUrl: './task-list.component.css',
  imports: [CommonModule, FormsModule],
  animations: [
    trigger('fadeInOut', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(-10px)' }),
        animate('300ms ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
      ]),
      transition(':leave', [
        animate('300ms ease-in', style({ opacity: 0, transform: 'translateY(-10px)' }))
      ])
    ])
  ]
})
export class TaskListComponent {
  newTask: string = "";
  tasks: { text: string; completed: boolean; priority: string }[] = [];
  filter: string = 'all';

  constructor() {
    this.loadTasks();
  }

  saveTasks() {
    localStorage.setItem('tasks', JSON.stringify(this.tasks));
  }

  loadTasks() {
    const savedTasks = localStorage.getItem('tasks');
    if (savedTasks) {
      this.tasks = JSON.parse(savedTasks);
    }
  }

  addTask() {
    if (this.newTask.trim() !== "") {
      this.tasks.push({ text: this.newTask, completed: false, priority: 'medium' });
      this.newTask = "";
      this.saveTasks();
    }
  }

  removeTask(index: number) {
    this.tasks.splice(index, 1);
    this.saveTasks();
  }

  toggleTask(index: number) {
    this.tasks[index].completed = !this.tasks[index].completed;
    this.saveTasks();
  }

  getFilteredTasks() {
    switch (this.filter) {
      case 'completed':
        return this.tasks.filter(task => task.completed);
      case 'pending':
        return this.tasks.filter(task => !task.completed);
      default:
        return this.tasks;
    }
  }

  setFilter(type: string) {
    this.filter = type;
  }

  getCompletionPercentage() {
    if (this.tasks.length === 0) return 0;
    const completedTasks = this.tasks.filter(task => task.completed).length;
    return Math.round((completedTasks / this.tasks.length) * 100);
  }
} 

let's update your HTML to include:
✅ Animated task entry/removal
✅ Progress bar for completed tasks

I'll generate the updated task-list.component.html now. 🚀

html:
<div class="text-center space-y-4">
  <p class="text-xl mb-5">Task List</p>

  <!-- Progress Bar -->
  <div class="w-full bg-gray-300 rounded-full h-2.5">
    <div 
      class="bg-green-500 h-2.5 rounded-full transition-all duration-500" 
      [style.width]="getCompletionPercentage() + '%'">
    </div>
  </div>
  <p class="text-sm text-gray-500">{{ getCompletionPercentage() }}% Completed</p>

  <!-- Input and Add button -->
  <input
    type="text"
    [(ngModel)]="newTask"
    placeholder="Enter a task"
    class="border-b focus:outline-none focus:ring-0 focus:border-b-2"
  />
  <button
    (click)="addTask()"
    class="my-3 mx-5 border px-5 py-[1px] rounded-full hover:shadow hover:shadow-amber-50"
  >
    Add Task
  </button>

  <!-- Filter Buttons -->
  <div class="flex justify-center items-center gap-10">
    <button (click)="setFilter('all')" class="w-22 rounded-full text-sm mt-5 hover:shadow shadow-amber-50">All</button>
    <button (click)="setFilter('completed')" class="w-22 rounded-full text-sm mt-5 hover:shadow shadow-amber-50">Completed</button>
    <button (click)="setFilter('pending')" class="w-22 rounded-full text-sm mt-5 hover:shadow shadow-amber-50">Pending</button>
  </div>

  <!-- Display Filtered Tasks with Animations -->
  <ul class="list-none mt-5">
    <li *ngFor="let task of getFilteredTasks(); let i = index" 
        [@fadeInOut] 
        class="w-full flex justify-between items-center gap-5 border-b mb-3 pb-2">
      <span [style.textDecoration]="task.completed ? 'line-through' : 'none'">
        {{ task.text }}
      </span>
      <div class="flex gap-5">
        <button (click)="toggleTask(i)" class="cursor-pointer hover:scale-105">
          ✔
        </button>
        <button (click)="removeTask(i)" class="cursor-pointer hover:scale-105">
          ❌
        </button>
      </div>
    </li>
  </ul>
</div> 

I'll generate the updated code now. 🚀

